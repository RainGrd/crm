<?xml version="1.0" encoding="UTF-8"?>

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->

<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->

<configuration status="TRACE" monitorInterval="30">
    <properties>
        <!-- 下面这二行随意，sys:catalina.home为tomcat的路径，这里的opms只是我项目的名字  -->
        <property name="LOG_HOME">${sys:catalina.home}/logs</property>
        <property name="FILE_NAME">opms</property>
    </properties>
    <!--先定义所有的appender-->
    <appenders>
        <!--控制台日志-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        </console>
        <!--输出到文件，其中有一个append属性，默认为true,即不清空原来的信息，采用添加的方式，若设为false，则会先清空原来的信息，再添加-->
        <File name="SqlFile" fileName="${LOG_HOME}/${FILE_NAME}/sql.log" append="true">
            <PatternLayout>
                <!--配置日志信息的格式 -->
                <pattern>%d{HH:mm:ss} [%t] %-5level %logger{36} - %msg%n</pattern>
            </PatternLayout>
        </File>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="${LOG_HOME}/${FILE_NAME}/test.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!--info日志-->
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${FILE_NAME}/info.log"
                     filePattern="${LOG_HOME}/${FILE_NAME}/log/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>

            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
        </RollingFile>

        <!--warn日志-->
        <RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/${FILE_NAME}/warn.log"
                     filePattern="${LOG_HOME}/${FILE_NAME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">

            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <!--error日志-->
        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/${FILE_NAME}/error.log"
                     filePattern="${LOG_HOME}/${FILE_NAME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

    </appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--打印sql信息-->
        <logger name="com.ssm.dao" level="DEBUG">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="SqlFile"/>
        </logger>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>

        <!--正式环境下改为info级别-->
        <root level="all">
            <!--Info输出到文件-->
            <appender-ref ref="RollingFileInfo"/>
            <!--Warn输出到文件-->
            <appender-ref ref="RollingFileWarn"/>
            <!--Error输出到文件-->
            <appender-ref ref="RollingFileError"/>
            <!--sql输出到文件-->
            <appender-ref ref="SqlFile"/>

            <!--正式环境下面两项删除-->
            <!--输出到控制台-->
            <appender-ref ref="Console"/>
        </root>

    </loggers>

</configuration>
        <!--
        error > warn > info > debug
        这里是做了日志的分级别存储，例如 warn-log 中 配置为
        <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
        <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>

        表示 如果出现error 的日志 因为 error > warn 所以这个也会记录error级别的日志，所以配置了上面表示不记录error的日志，
        由于info ，debug 均小于 warn 所以不会记录，
        -->

